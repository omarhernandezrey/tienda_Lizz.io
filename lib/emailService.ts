// lib/emailService.ts
import emailjs from '@emailjs/browser';

// Configuraci√≥n REAL de EmailJS basada en las im√°genes de Liz
const EMAILJS_CONFIG = {
  serviceId: 'service_ay816cm', // Service ID real
  templateContactId: 'template_a2zgyat', // Template ID del primer "Contact Us"
  templateOrderId: 'template_a2zgyat', // Usando el mismo template que funciona
  userId: 'kbeklIHjiKTHwlCFZ', // Public Key real CORREGIDA
};

// Inicializar EmailJS con la clave p√∫blica real
emailjs.init(EMAILJS_CONFIG.userId);

interface ContactFormData {
  name: string;
  email: string;
  phone: string;
  subject: string;
  message: string;
}

interface OrderData {
  customer: {
    name: string;
    phone: string;
    email: string;
    address: string;
    city: string;
    notes: string;
  };
  items: Array<{
    id: string;
    name: string;
    price: number;
    quantity: number;
  }>;
  total: number;
  paymentMethod: string;
}

// Funci√≥n para formatear precio
const formatPrice = (price: number) => {
  return new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP',
    minimumFractionDigits: 0
  }).format(price);
};

// Funci√≥n para enviar email de contacto
export const sendContactEmail = async (formData: ContactFormData): Promise<boolean> => {
  try {
    // Par√°metros que coinciden con el template de EmailJS existente
    const templateParams = {
      customer_name: formData.name, // {{customer_name}} en el template
      customer_email: formData.email, // {{customer_email}} en el template  
      customer_phone: formData.phone, // {{customer_phone}} en el template
      subject: formData.subject, // {{subject}} en el template
      message: formData.message, // {{message}} en el template
      date: new Date().toLocaleString('es-CO', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        timeZone: 'America/Bogota'
      }), // {{date}} en el template
      to_email: 'lizrincon1693@gmail.com', // Email destino
      to_name: 'Liz Rinc√≥n', // Nombre destino
    };

    console.log('üìß Enviando email de contacto a lizrincon1693@gmail.com...');
    console.log('üìã Datos:', templateParams);

    const response = await emailjs.send(
      EMAILJS_CONFIG.serviceId,
      EMAILJS_CONFIG.templateContactId,
      templateParams
    );

    console.log('‚úÖ Email de contacto enviado exitosamente!');
    console.log('üìä Respuesta EmailJS:', response.status, response.text);
    return true;
  } catch (error) {
    console.error('‚ùå Error enviando email de contacto:', error);
    return false;
  }
};

// Funci√≥n para enviar email de pedido
export const sendOrderEmail = async (orderData: OrderData): Promise<boolean> => {
  try {
    // Formatear lista de productos exactamente como en el template
    const productsList = orderData.items.map(item => 
      `‚Ä¢ ${item.name} (Cantidad: ${item.quantity}) - ${formatPrice(item.price * item.quantity)}`
    ).join('\n');

    // Par√°metros que coinciden con el template de pedidos
    const templateParams = {
      customer_name: orderData.customer.name,
      customer_email: orderData.customer.email,
      customer_phone: orderData.customer.phone,
      customer_address: orderData.customer.address,
      customer_city: orderData.customer.city,
      products_list: productsList,
      total: formatPrice(orderData.total),
      payment_method: orderData.paymentMethod,
      notes: orderData.customer.notes || 'Ninguna',
      order_id: `ORD-${Date.now()}`,
      date: new Date().toLocaleString('es-CO', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        timeZone: 'America/Bogota'
      }),
      to_email: 'lizrincon1693@gmail.com', // Email destino
      to_name: 'Liz Rinc√≥n', // Nombre destino
    };

    console.log('üìß Enviando email de pedido a lizrincon1693@gmail.com...');
    console.log('üõí Datos del pedido:', templateParams);

    const response = await emailjs.send(
      EMAILJS_CONFIG.serviceId,
      EMAILJS_CONFIG.templateOrderId,
      templateParams
    );

    console.log('‚úÖ Email de pedido enviado exitosamente!');
    console.log('üìä Respuesta EmailJS:', response.status, response.text);
    return true;
  } catch (error) {
    console.error('‚ùå Error enviando email de pedido:', error);
    console.error('üí° Verifica que el template_mcysftq est√© configurado correctamente');
    return false;
  }
};

// Funci√≥n para probar la configuraci√≥n
export const testEmailService = async (): Promise<boolean> => {
  try {
    const testData: ContactFormData = {
      name: 'Prueba del Sistema EmailJS',
      email: 'test@eleganciaencuero.com',
      phone: '314 247 0366',
      subject: 'Prueba de Configuraci√≥n',
      message: 'üß™ Este es un email de prueba para verificar que EmailJS est√° funcionando correctamente con la configuraci√≥n real. Si recibes este mensaje en lizrincon1693@gmail.com, ¬°todo est√° perfecto! üéâ'
    };

    console.log('üß™ Ejecutando prueba de EmailJS...');
    const result = await sendContactEmail(testData);
    
    if (result) {
      console.log('‚úÖ ¬°PRUEBA EXITOSA! Email enviado a lizrincon1693@gmail.com');
      console.log('üì¨ Revisa la bandeja de entrada de Liz');
    } else {
      console.log('‚ùå La prueba fall√≥. Revisa la configuraci√≥n y la consola');
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå Error en prueba de EmailJS:', error);
    return false;
  }
};

// Funci√≥n para verificar la configuraci√≥n actual
export const verifyConfiguration = () => {
  console.log('üîß === CONFIGURACI√ìN EMAILJS ACTUAL ===');
  console.log('üìß Email destino: lizrincon1693@gmail.com');
  console.log('üîë Service ID:', EMAILJS_CONFIG.serviceId);
  console.log('üìù Template Contacto:', EMAILJS_CONFIG.templateContactId);
  console.log('üõí Template Pedido:', EMAILJS_CONFIG.templateOrderId);
  console.log('üÜî User ID (Public Key):', EMAILJS_CONFIG.userId);
  console.log('‚úÖ Configuraci√≥n basada en las im√°genes reales de EmailJS');
  console.log('==========================================');
};

// Exportar configuraci√≥n
export const getEmailJSConfig = () => EMAILJS_CONFIG;